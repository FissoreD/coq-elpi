/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */
pred string->coq-mode i:string, o:hint-mode.
string->coq-mode "bang" mode-ground :- !.
string->coq-mode "plus" mode-input :- !.
string->coq-mode "minus" mode-output :- !.
string->coq-mode "i" mode-input :- !.
string->coq-mode "o" mode-output :- !.
string->coq-mode A _ :- coq.error A "is not a valid mode".

pred coq-mode->elpi i:hint-mode, o:pair argument_mode string.
:name "coq-mode->elpi"
coq-mode->elpi mode-ground (pr in "term"). % approximation
coq-mode->elpi mode-input (pr in "term").
coq-mode->elpi mode-output (pr out "term").

% Here we build the elpi modes a class CL. If CL has either zero or more than
% one mode, then we consider all its parameter to be in output mode. If the
% class has exactly one mode, then it is considered for the signature of the
% predicate for CL 
pred modes-of-class i:gref, o:list (pair argument_mode string).
modes-of-class ClassGR Modes :- 
  coq.hints.modes ClassGR "typeclass_instances" CoqModesList,
  not (CoqModesList = []),
  not (CoqModesList = [_,_|_], coq.warning "TC.Modes" "At the moment we only allow TC with at most 1 hint Mode (caused by class" {coq.gref->string ClassGR} ")"),
  CoqModesList = [HintModesFst],
  std.append {std.map HintModesFst coq-mode->elpi} [pr out "term"] Modes.
modes-of-class ClassGR Modes :- 
  coq.env.typeof ClassGR ClassTy,
  N is {coq.count-prods ClassTy} + 1, % + 1 for the solution
  list-init N (x\r\ r = (pr out "term")) Modes.

pred get-class-locality o:list prop. 
get-class-locality [@local!] :- coq.env.current-section-path [_ | _], !.
get-class-locality [@global!].

pred add-class-gr i:search-mode, i:gref.
add-class-gr SearchMode ClassGR :-
  std.assert! (coq.TC.class? ClassGR) "Only gref of type classes can be added as new predicates",
  if (class ClassGR _ _) true 
    (modes-of-class ClassGR Modes, 
      gref->pred-name ClassGR PredName,
      get-class-locality Locality, 
      Locality => (
        add-tc-db _ _ (tc-mode ClassGR Modes),
        coq.elpi.add-predicate "tc.db" _ PredName Modes,
        add-tc-db _ _ (class ClassGR PredName SearchMode))).

pred add-class-str i:search-mode, i:string.
add-class-str SearchMode ClassStr :-
  coq.locate ClassStr ClassGR,
  add-class-gr SearchMode ClassGR.

% Following are predicates for TC.declare

pred attr->search-mode o:search-mode. 
attr->search-mode deterministic :- get-option "deterministic" tt, !.
attr->search-mode classic.

pred attr->modes o:list hint-mode.
attr->modes CoqModes :- 
  get-option "mode" L,
  std.map L get-key-from-option RawModes, 
  std.map RawModes string->coq-mode CoqModes, !.
attr->modes [].

pred get-key-from-option i:prop, o:string. 
get-key-from-option (get-option A tt) A :- !.
get-key-from-option (get-option "i" ff) "o" :- !.
get-key-from-option (get-option "o" ff) "i" :- !.
get-key-from-option A _ :- coq.error A "should be an option".

pred declare-class-in-coq i:gref.
declare-class-in-coq ClassGR :- 
  attr->modes CoqModes,
  if (CoqModes = []) true 
    (coq.hints.add-mode ClassGR "typeclass_instances" CoqModes),
  % CAVEAT: this triggers the observer
  coq.TC.declare-class ClassGR,
  attr->search-mode SearchMode, 
  gref->pred-name ClassGR PredName,
  % HACK: we override the clauses added by the observer, since it does not know
  % the SearchMode.
  get-class-locality Locality, 
  Locality => add-tc-db _ (after "0") (class ClassGR PredName SearchMode :- !).

pred declare-class i:indt-decl. 
declare-class D :- !, 
  coq.env.add-indt D I,
  coq.parse-attributes {attributes} 
    [ att "mode" attlist, att "deterministic" bool ] Opts,
  Opts => declare-class-in-coq (indt I).