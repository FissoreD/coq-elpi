/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

accumulate base.
accumulate tc_aux.

% returns the classes on which the current gref depends
pred get-class-dependencies i:gref, o:list gref.
get-class-dependencies GR Res :-
  coq.env.dependencies GR _ DepSet,
  coq.gref.set.elements DepSet DepList,
  std.filter DepList coq.TC.class? Res.

pred unify-fo i:list name, i:list term, i:list (term -> term), o:term, i:list term, o:term.
unify-fo [Name | Names] [Ty | Tys] [Fun | Funs] (fun Name Ty Fun) [X|Xs] R :- 
  var R, !,
  unify-fo Names Tys Funs (Fun X) Xs R.
unify-fo _ _ _ F L R :- var R, !, coq.mk-app F L R.
unify-fo _ _ _ F L (app R) :-
  std.appendR H L R,
  if (H = [X]) (F = X) (F = app H).
unify-fo _ _ _ F [] F.

pred remove-ho-unification i:bool, i:int, i:term, i:term, i:list prop, i:list term, i:list name, i:list term, i:list (term -> term), i:list term, i:list prop, o:prop.
:name "remove-ho-unification:start"
remove-ho-unification IsPositive 0 Ty AppInst Premises [] _ _ _ _ Fixes Clause :- !,
  copy Ty Ty1,
  copy AppInst AppInst1,
  if (IsPositive = tt)
  (make-tc Ty1 AppInst1 {std.append Fixes Premises} Clause)
  (make-tc Ty1 AppInst1 Premises Clause1, std.append Fixes [Clause1] L, Clause = do L). 
remove-ho-unification IsPositive 0 Ty AppInst Premises [(app [X | Y] as G) | TL] Names Types Funs [Gen | GensTL] Fixes P2 :- !,
  std.length Y Arity,
  std.split-at Arity Types SubTypes TypesTL, 
  std.split-at Arity Names SubNames NamesTL,
  std.split-at Arity Funs SubFuns FunsTL,
  P1 = (unify-fo SubNames SubTypes SubFuns X Y Gen),
  copy G Gen => 
  remove-ho-unification IsPositive 0 Ty AppInst Premises TL NamesTL TypesTL FunsTL GensTL [P1 | Fixes] P2. 

remove-ho-unification tt N Ty AppInst Premises LT NameL TypeL FunL GenL Fixes (pi ty f name gen\ Clause ty f name gen) :-
  N > 0,
  N1 is N - 1,
  pi name ty f gen\ remove-ho-unification tt N1 Ty AppInst Premises LT 
    [name | NameL] [ty | TypeL] [f | FunL] 
    [gen | GenL] Fixes (Clause ty f name gen).

remove-ho-unification ff N Ty AppInst Premises LT NameL TypeL FunL GenL Fixes (sigma ty f name gen\ Clause ty f name gen) :-
  N > 0,
  N1 is N - 1,
  pi name ty f gen\ remove-ho-unification ff N1 Ty AppInst Premises LT 
    [name | NameL] [ty | TypeL] [f | FunL] 
    [gen | GenL] Fixes (Clause ty f name gen).

pred pattern-fragment? i:term.
pattern-fragment? (app [HD|TL]) :- 
  not (HD = global _), distinct_names [HD | TL].

pred get-pattern-fragment i:term, o:list term.
get-pattern-fragment T1 TL :- !,
  (pi L G GL\ fold-map (app L as G) GL G [G | GL] :- distinct_names L) =>
  % (pi G GL\ fold-map (app _ as G) GL G GL) =>
  (pi G GL\ fold-map (prod _ _ _ as G) GL G GL) => 
  fold-map T1 [] _ TL.

/*
[compile-aux-preprocess InstType InstTerm UnivL UnivInstL Clause No-Premises]
InstType   : the type of the current instance
InstTerm   : the term corresponding to the current instance
UnivL      : the list of universal variable to be replaced with elpi fresh variables
UnivInstL  : the list of universal instances to be replaced with elpi fresh variables
Clause     : the clause corresponding to the current instace
No-Premises: The instance has no premises
*/
pred compile-aux-preprocess i:term, i:term, i:list univ, i:list univ-instance, o:prop.
compile-aux-preprocess InstType InstTerm [] [] Clause :-
  copy InstType InstType', !,
  compile-aux InstType' InstTerm [] [] tt Clause.
compile-aux-preprocess InstType InstTerm [Univ | UnivL] UnivInstL (pi x\ Clause x) :-
  pi x\ copy (sort (typ Univ)) (sort (typ x)) => 
    compile-aux-preprocess InstType InstTerm UnivL UnivInstL (Clause x).
compile-aux-preprocess InstType InstTerm [] [UnivInst | UnivInstL] (pi x\ Clause x) :-
  pi x\ copy (pglobal A UnivInst) (pglobal A x) => 
    compile-aux-preprocess InstType InstTerm [] UnivInstL (Clause x).

/*
[compile-aux InstType InstTerm Premises PiAccRev IsPositive Clause No-Premises]
InstType    : the type of the instance
InstTerm    : the term corresponding to the current instance
Premises    : list of constraints/premises of an instances found from its type
PiAccRev    : the list of pi variables accumulated from the (prod _ _ Bo) of the 
              type of Inst. The will be used on the solution of the clause
              coq.mk-app Inst {std.rev PiAccRev} Sol
IsPositive  : bring the information about the positivity of the current sub-term
              e.g. if T = A -> (B -> C) -> D, then:
              D is positive in T, (B -> C) is negative, A is positive in T
              C is positivie in (B -> C), B is negative in (B -> C)
              IsPositive is used to know how to accumulate sigma Xi\ and pi x\ in the 
              current clause 
Clause      : the solution to be returned
No-Premises : a boolean saying if the returned clause as no premises that is an 
              instance with no hypothesis
*/
pred compile-aux i:term, i:term, i:list prop, i:list term, i:bool, o:prop.
:name "compiler-aux:start"
compile-aux (prod N T F) I RevPremises ListVar IsPositive Clause :- !,
  (if (IsPositive = tt) (Clause = pi x\ C x) (Clause = (pi x\ decl x N T => C x))),
  pi p\ sigma NewPremise TC L\ 
    if (get-TC-of-inst-type T TC, coq.TC.class? TC /*, not (occurs p (F p))*/) 
      (compile-aux T p [] [] {neg IsPositive} NewPremise,
      if (class TC _ deterministic) 
        (L = [do-once NewPremise | RevPremises])
        (L = [NewPremise | RevPremises])) (L = RevPremises),
    compile-aux (F p) I L [p | ListVar] IsPositive (C p).
compile-aux Ty I RevPremises ListVar _ Clause :- 
  not (is-option-active oTC-use-pattern-fragment-compiler), !,
  std.rev RevPremises Premises,
  coq.mk-app I {std.rev ListVar} AppInst,
  make-tc Ty AppInst Premises Clause.
compile-aux Ty I RevPremises ListVar IsPositive Clause :- !,
  std.rev RevPremises Premises,
  coq.mk-app I {std.rev ListVar} AppInst,
  std.append {get-pattern-fragment Ty} {get-pattern-fragment AppInst} Term-to-be-fixed,
  std.fold Term-to-be-fixed 0 (e\acc\r\ sigma L X\ e = app X, std.length X L, r is acc + L - 1) Len,
  remove-ho-unification IsPositive Len Ty AppInst Premises Term-to-be-fixed [] [] [] [] [] Clause.

% build a list of Clauses of type tc to be temporarly added to the 
% database, used in theorems having assumptions.
pred compile-ctx i:goal-ctx, o:list prop.
compile-ctx [] [].
compile-ctx [X | Xs] [Clause | ResTl] :-
  (decl Var _ Ty = X; def Var _ Ty _ = X),
  is-instance-term Ty,
  compile-ty Ty Var _ Clause,
  compile-ctx Xs ResTl.
compile-ctx [_ | Tl] L :- compile-ctx Tl L.

pred get-univ-instances i:term, o:list univ-instance.
get-univ-instances T L :-
  (pi x L\ fold-map (pglobal _ x) L _ [x | L]) => fold-map T [] _ L.

pred get-univ i:term, o:list univ.
get-univ T L :-
  coq.univ.variable.set.elements {coq.univ.variable.of-term T} Vars,
  std.map Vars (x\r\ coq.univ.variable r x) L.

pred compile-ty i:term, i:term, o:gref, o:prop.
compile-ty Ty Inst TC-of-Inst Clause:-
  get-TC-of-inst-type Ty TC-of-Inst,
  @redflags! coq.redflags.beta => coq.reduction.lazy.norm Ty Ty1, 
  get-univ Ty1 UnivConstL,
  get-univ-instances Ty1 UnivInstL,
  compile-aux-preprocess Ty1 Inst UnivConstL UnivInstL Clause.

pred compile i:gref, o:gref, o:prop.
compile InstGR TC-of-Inst Clause:-
  coq.env.typeof InstGR Ty,
  compile-ty Ty (global InstGR) TC-of-Inst Clause.

% if an instance depends on multiple TC then a warning is raised.
pred warn-multiple-deps i:gref, i:list gref.
warn-multiple-deps Inst Dep :-
  if (fail, {std.length Dep} > 1) (
    coq.warning "add-inst-with-multiple-deps"  "TC-warning"
    "Adding" Inst "which dependes on mulitple class dependencies:" Dep) 
    true.

pred has-context-deps i:gref.
has-context-deps GR :-
  coq.env.section SectionVars,
  coq.env.dependencies GR _ Deps, 
  std.exists SectionVars (x\ coq.gref.set.mem (const x) Deps).

pred get-locality i:string, o:list prop.
get-locality "Local" [@local!].
get-locality _ [@local!] :- coq.env.current-section-path [_ | _].
get-locality "Global" [@global!].
get-locality "Export" [].

pred add-inst.aux i:gref, i:gref i:list prop, i:grafting.
add-inst.aux Inst TC Locality Grafting :-
  coq.env.current-section-path SectionPath,
  compile Inst TC Clause, 
  get-full-path Inst ClauseName,
  Locality => (
    add-tc-db ClauseName Grafting Clause, 
    add-tc-db _ Grafting (instance SectionPath Inst TC)).
add-inst.aux Inst _ _ _ :- 
  @global! => add-tc-db _ _ (banned Inst),
  coq.warning "Not-added" "TC_solver" "Warning : Cannot compile " Inst "since it is pglobal".

pred add-inst i:gref, i:gref, i:string, i:int.
add-inst Inst TC LocalityStr Prio :-
  get-locality LocalityStr Locality,
  if (Prio = -1) (get-inst-prio Inst Prio1) (Prio1 = Prio),
  Grafting is after (int_to_string Prio1),
  add-inst.aux Inst TC Locality Grafting.

pred is-local.
is-local :- std.mem {attributes} (attribute "local" _).

% [add-inst->db IgnoreClassDepL ForceAdd Inst] add the Inst to
% the database except those depending on at least one 
% inside IgnoreClassDepL
pred add-inst->db i:list gref, i:bool, i:gref.
:name "add-inst->db:start"
add-inst->db IgnoreClassDepL ForceAdd Inst :-
  get-class-dependencies Inst Dep,
  warn-multiple-deps Inst Dep,
  if ((ForceAdd = tt; not (instance _ Inst _)), 
    not (std.exists Dep (std.mem IgnoreClassDepL)), not (banned Inst)) 
  (Grafting is after (int_to_string {get-inst-prio Inst}),
    get-TC-of-inst-type {coq.env.typeof Inst} TC,
    if (is-local; has-context-deps Inst) (Locality = [@local!]) (Locality = [@global!]),
    add-inst.aux Inst TC Locality Grafting)
  true /* true: the instance has already been added or is banned */.

% add all the instances of a TC
pred add-inst-of-tc i:list gref, i:list gref, i:gref.
add-inst-of-tc IgnoreDepClassGR IgnoreInstsGR GR:-
  get-inst-by-tc-name GR InstL,
  std.filter InstL (x\ not (std.mem IgnoreInstsGR x)) InstLF,
  std.forall InstLF (add-inst->db IgnoreDepClassGR ff).

pred add-tc-or-inst-gr i:list string, i:list string, i:list gref.
add-tc-or-inst-gr IgnoreDepClass IgnoreInsts Names :-
  std.map IgnoreDepClass coq.locate IgnoreDepClassGR,
  std.map IgnoreInsts coq.locate IgnoreInstsGR,
  std.forall Names (GR\
    if2 (coq.TC.class? GR)(add-inst-of-tc IgnoreDepClassGR IgnoreInstsGR GR)
        (is-instance-gr GR)(add-inst->db IgnoreDepClassGR ff GR)
        (coq.warning "not-inst-nor-tc" "TC-warning" GR "is neither a TC nor a instance")
  ).

% [add-tc-or-inst IgnoreDepClass ClassName] look
% for all the instances of ClassName and call the pred
% add-inst->db
pred add-tc-or-inst i:list string, i:list string, i:list string.
add-tc-or-inst IgnoreDepClass IgnoreInsts Names :-
  std.map Names coq.locate L,
  add-tc-or-inst-gr IgnoreDepClass IgnoreInsts L.

% takes a Path and a GR and returns if 
% the GR is located in Path
pred is-in-path i:string, i:gref. 
is-in-path Path GR :- 
  std.mem {coq.gref->path GR} Path.

% Look for the instances of ClassName 
% that are located in Path.
pred add-path i:string, i:string.
add-path ClassName Path :-
  coq.locate ClassName GR,
  std.filter {get-inst-by-tc-name GR} (is-in-path Path) InstInPath,
  std.forall InstInPath (add-inst->db [] ff).