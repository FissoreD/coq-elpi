/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% returns the classes on which the current gref depends
pred get-class-dependencies i:gref, o:list gref.
get-class-dependencies GR Res :-
  coq.env.dependencies GR _ DepSet,
  coq.gref.set.elements DepSet DepList,
  std.filter DepList coq.TC.class? Res.

% build a list of Clauses of type tc to be temporarly added to the 
% database, used in theorems having assumptions.
pred compile-ctx i:goal-ctx, o:list prop.
compile-ctx [] [].
compile-ctx [X | Xs] [Clause | ResTl] :-
  (decl Var _ Ty = X; def Var _ Ty _ = X),
  std.do![
    is-instance-term Ty,
    compile-ty Ty Var Clause,
    compile-ctx Xs ResTl], !.
compile-ctx [_ | Tl] L :- compile-ctx Tl L.

pred compile-ty i:term, i:term, o:prop.
compile-ty TyRaw Inst Clause:-
  std.do![
    normalize-ty TyRaw Ty,
    @redflags! coq.redflags.beta => coq.reduction.lazy.norm Ty Ty1,
    tc.compile.instance Ty1 Inst Clause].

pred compile i:gref, o:prop.
compile InstGR Clause:-
  coq.env.typeof InstGR Ty,
  compile-ty Ty (global InstGR) Clause.

pred has-context-deps i:gref.
has-context-deps GR :-
  coq.env.section SectionVars,
  coq.env.dependencies GR _ Deps, 
  std.exists SectionVars (x\ coq.gref.set.mem (const x) Deps).

pred get-locality i:string, o:list prop.
get-locality "Local" [@local!].
get-locality _ [@local!] :- coq.env.current-section-path [_ | _].
get-locality "Global" [@global!].
get-locality "Export" [].

pred add-inst.aux i:gref, i:gref i:list prop, i:grafting.
add-inst.aux Inst TC Locality Grafting :-
  coq.env.current-section-path SectionPath,
  compile Inst Clause, 
  get-full-path Inst ClauseName,
  Locality => (
    add-tc-db ClauseName Grafting Clause, 
    add-tc-db _ Grafting (instance SectionPath Inst TC)).
add-inst.aux Inst _ _ _ :- 
  @global! => add-tc-db _ _ (banned Inst),
  coq.error "Not-added" "TC_solver" "[TC] Not yet able to compile" Inst "...".

pred add-inst i:gref, i:gref, i:string, i:int.
add-inst Inst TC LocalityStr Prio :-
  get-locality LocalityStr Locality,
  if (Prio = -1) (get-inst-prio Inst Prio1) (Prio1 = Prio),
  Grafting is after (int_to_string Prio1),
  add-inst.aux Inst TC Locality Grafting.

pred is-local.
is-local :- std.mem {attributes} (attribute "local" _).

pred add-inst>db.aux i:gref.
add-inst>db.aux Inst :-
  get-inst-prio Inst Prio,
  get-TC-of-inst-type {coq.env.typeof Inst} TC,
  % Note: this is an approximation of instance locality when added with 
  %       TC.AddAllInstances or TC.AddInstances InstName
  if (is-local; has-context-deps Inst) 
    (LocalityStr = "Local") 
    (LocalityStr = "Global"),
  add-inst Inst TC LocalityStr Prio.

% [add-inst->db IgnoreClassDepL ForceAdd Inst] compiles and add the Inst to
% the database if the instance is not banned or if it does not depend on a TC
% inside the list IgnoreClassDepL.
pred add-inst->db i:list gref, i:bool, i:gref.
add-inst->db _ tt Inst :- !, add-inst>db.aux Inst.
add-inst->db _ _ Inst :- 
  banned Inst, !, (coq.warning "banned-inst" "TC-warning" Inst "is banned").
add-inst->db _ _ Inst :- instance _ Inst _, !. % the instance has already been added
add-inst->db IgnoreClassDepL _ Inst :-
  get-class-dependencies Inst Dep,
  std.exists Dep (std.mem IgnoreClassDepL), !,
  coq.warning "invalid-dependency-inst" "TC-warning" Inst "depneds on a banned TC".
add-inst->db _ _ Inst :- !, add-inst>db.aux Inst.

% add all the instances of a TC
pred add-inst-of-tc i:list gref, i:list gref, i:gref.
add-inst-of-tc IgnoreDepClassGR IgnoreInstsGR GR:-
  get-inst-by-tc-name GR InstL,
  std.filter InstL (x\ not (std.mem IgnoreInstsGR x)) InstLF,
  std.forall InstLF (add-inst->db IgnoreDepClassGR ff).

pred add-tc-or-inst-gr i:list string, i:list string, i:list gref.
add-tc-or-inst-gr IgnoreDepClass IgnoreInsts Names :-
  std.map IgnoreDepClass coq.locate IgnoreDepClassGR,
  std.map IgnoreInsts coq.locate IgnoreInstsGR,
  std.forall Names (GR\
    if2 (coq.TC.class? GR)(add-inst-of-tc IgnoreDepClassGR IgnoreInstsGR GR)
        (is-instance-gr GR)(add-inst->db IgnoreDepClassGR ff GR)
        (coq.warning "not-inst-nor-tc" "TC-warning" GR "is neither a TC nor a instance")
  ).

% [remove-inst GR] remove an instance from the DB by replacing it with `dummy`
pred remove-inst i:gref.
remove-inst InstGR :- 
  get-full-path InstGR ClauseName,
  remove-clause ClauseName.

pred is-in-path i:string, i:gref. 
is-in-path Path GR :- 
  std.mem {coq.gref->path GR} Path.

% [add-path ClassName Path] adds only the instances from a given path name
pred add-path i:string, i:string.
add-path ClassName Path :-
  coq.locate ClassName GR,
  std.filter {get-inst-by-tc-name GR} (is-in-path Path) InstInPath,
  std.forall InstInPath (add-inst->db [] ff).

namespace class-coercion {
  kind task type.
  type add task.
  type remove task.

  pred do-task i:task, i:gref.
  do-task add GR :- add-inst->db [] tt GR.
  do-task remove GR :- remove-inst GR.

  pred loop-proj i:task, i:list argument.
  loop-proj _ [].
  loop-proj Task [str Proj | TL] :- 
    coq.locate Proj GRProj, existing-instance GRProj, !,
    do-task Task GRProj,
    loop-proj Task TL.
  loop-proj Task [_|TL] :- loop-proj Task TL.
  
}