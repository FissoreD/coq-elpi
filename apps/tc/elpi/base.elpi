/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% [count L X R] counts the occurrences of X in L
pred count i:list A, i:A, o:int.
count [] _ 0.
count [A | TL] A R :- count TL A X, R is (X + 1).
count [_ | TL] A R :- count TL A R.

pred expected-found i:A, i:A. 
expected-found Expected Found :- 
  Expected = Found; 
  halt "Assertion error"
  "\nExpected :" Expected
  "\nFound    :" Found.

pred last-no-error i:list A, o:A.
last-no-error A B :-
  (std.last [] _ :- !, fail) => std.last A B.

% [find L F R] returns the first R in L such that (F R) is valid
pred find i:list A, i:(A -> prop), o:A.
find [] _ _ :- std.fatal-error "find element not found".
find [R | _] F R :- F R.
find [_ | L] F R :- find L F R.

pred find-opt i:list A, i:(A -> prop), o:(option A).
find-opt [] _ none.
find-opt [R | _] F (some R) :- F R.
find-opt [_ | L] F R :- find-opt L F R.

pred list-init i:int, i:(int -> A -> prop), o:list A.
list-init N _ _ :- N < 0, std.fatal-error "list-init negative length".
list-init 0 _ [] :- !.
list-init N F [A | TL] :-
  F N A, N1 is N - 1, list-init N1 F TL.

pred args->str-list i:list argument, o: list string.
args->str-list L Res :-
  std.map L (x\r\ str r = x) Res.

pred or i:bool, i:bool, o:bool.
or ff ff ff :- !. 
or _ _ tt.

pred neg i:bool, o:bool.
neg tt ff.
neg ff tt.

pred fail->bool i:prop, o:bool.
fail->bool P ff :- P, !.
fail->bool _ tt.

pred sep.
sep :- coq.say "---------------------------------".

pred do i:list prop.
do [].
do [P|PS] :- P, do PS.

pred do-once i:prop. 
do-once A :- A, !.

pred if-true i:prop, i:prop.
if-true A B :- if A B true.

pred if-false i:prop, i:prop.
if-false A B :- if A true B.

pred std.findall-unary i:(A -> prop), o:list A.
std.findall-unary P L :-
  std.findall (P _) V,
  std.map V (x\y\ P y = x) L.

pred print-repeat-aux i:int, i:string, o:string.
print-repeat-aux 0 _ S :- coq.say S.
print-repeat-aux N A S :- N > 0, N1 is N - 1,
  S' is A ^ S, print-repeat-aux N1 A S'.

pred print-repeat i:int, i:string.
print-repeat I S :- print-repeat-aux I S "".

pred split-at-not-fatal i:int, i:list A, o:list A, o:list A.
split-at-not-fatal 0 L [] L :- !.
split-at-not-fatal N [X|XS] [X|LN] LM :- !, N1 is N - 1, 
  split-at-not-fatal N1 XS LN LM.

:index (1)
pred is-coq-term i:A.
is-coq-term (sort _).
is-coq-term (global _).
is-coq-term (pglobal _ _).
is-coq-term (app _).
is-coq-term (fun _ _ _).
is-coq-term (prod _ _ _ ). 
is-coq-term (fix _ _ _ _ ). 
is-coq-term (match _ _ _). 
is-coq-term (let _ _ _ _).
is-coq-term (primitive _).
