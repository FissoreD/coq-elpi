namespace tc {
  namespace compile {

    namespace instance {
      pred compile-aux-preprocess 
        i:term,               % the type of the instance
        i:term,               % the global gref of the instance
        i:list univ,          % the list of univ variable to be replaced with elpi fresh vars
        i:list univ-instance, % the list of univ-instance to be replaced with elpi fresh vars
        o:prop.               % the compiled clause for the instance

      compile-aux-preprocess InstType InstTerm [] [] Clause :-
        copy InstType InstType', !,
        tc.precomp.instance InstType' InstType'' N,
        compile-quantify-pi-for-problem-terms N [] InstType'' InstTerm Clause.
      compile-aux-preprocess InstType InstTerm [Univ | UnivL] UnivInstL (pi x\ Clause x) :- !,
        pi x\ (copy (sort (typ Univ)) (sort (typ x)) :- !) => 
          compile-aux-preprocess InstType InstTerm UnivL UnivInstL (Clause x).
      compile-aux-preprocess InstType InstTerm [] [UnivInst | UnivInstL] (pi x\ Clause x) :- !,
        pi x\ (copy (pglobal A UnivInst) (pglobal A x) :- !) => 
          compile-aux-preprocess InstType InstTerm [] UnivInstL (Clause x).

      pred clean-term i:term, o:term.
      clean-term A B :-
        (pi t s r\ copy (tc.maybe-eta-tm t s) r :- !, copy t r) =>
        (pi t s r\ copy (tc.maybe-beta-tm t s) r :- !, copy t r) =>
          copy A B.

      pred make-eta-link i:nat, i:term, i:term, i:term, i:name, i:list term, o:prop.
      make-eta-link z (tc.maybe-beta-tm (prod _ Ty _) _) A B Name L (link.eta A' (fun Name Ty' (x\ B' x))) :-
        clean-term Ty Ty',
        name A' A L,
        pi x\ sigma L'\ std.append L [x] L', name (B' x) B L'.
      make-eta-link (s N) (tc.maybe-beta-tm (prod _ Ty Bo) _) A B Name L (pi x\ decl x `x` Ty' => Link x) :-
        clean-term Ty Ty',
        pi x\ make-eta-link N (Bo x) A B Name [x|L] (Link x). 

      pred compile-quantify-pi-for-problem-terms
        i:nat, i:list term,
        i:term,             % the fuel of the compilation (the type of the instance)
        i:term,             % the global gref of the current instance
        o:prop.             % the compiled clause for the instance

      compile-quantify-pi-for-problem-terms z L InstType ProofHd Clause :-
        compile-xxx L _ ProofHd tt InstType [] [] Clause.
      compile-quantify-pi-for-problem-terms (s N) L InstType ProofHd (pi x\ Clause x) :-
        pi x\ is-uvar x => compile-quantify-pi-for-problem-terms N [x|L] InstType ProofHd (Clause x).


      % Add links as prem for map-dedup
      pred compile-yyy 
        i:(list prop -> prop -> prop),
        i:nat, i:nat, i:term, i:term, i:term, i:list prop, o:prop.
      compile-yyy F End End _ _ _ PremR Clause :- !, F PremR Clause.
      compile-yyy F N End OldVar P PTy PremR (pi x y\ Clause x y) :-
        pi x name\ sigma EtaLink\
          make-eta-link N PTy OldVar x name [] EtaLink,
          var-mem P x N PTy =>
            compile-yyy F (s N) End x P PTy [EtaLink | PremR] (Clause x name).

      pred compile-premise 
        i:list term,
        o:list term,
        i:term,
        i:term,
        i:term,
        i:bool,
        i:term,
        i:list term,
        i:list prop,
        o:prop.
      compile-premise L L2 P PTy ProofHd IsPositive ITy ProofTlR PremR Clause :-
        (pi a b c\ get-TC-of-inst-type (tc.maybe-beta-tm a c) b :- get-TC-of-inst-type a b) => 
          get-TC-of-inst-type PTy TC, !,
        compile-xxx L L1 P {neg IsPositive} PTy [] [] NewPrem,
        if (class TC _ deterministic _)
          (NewPrem' = do-once NewPrem)
          (NewPrem' = NewPrem),
        compile-xxx L1 L2 ProofHd IsPositive ITy ProofTlR [NewPrem' | PremR] Clause.
      compile-premise L L1 _ _ ProofHd IsPositive ITy ProofTlR PremR Clause :-
        compile-xxx L L1 ProofHd IsPositive ITy ProofTlR PremR Clause. 

      pred compile-xxx 
        i:list term,
        i:list term,
        i:term,
        i:bool,
        i:term,
        i:list term,
        i:list prop,
        o:prop.
      compile-xxx L L1 ProofHd IsPositive (tc.maybe-beta-tm (prod N Ty Bo) Arity) ProofTlR PremR Clause :- !,
        std.do![
          if (IsPositive = tt) 
            (Clause = (pi x\ C x), E = x\[is-uvar x]) 
            (clean-term Ty Ty', Clause = (pi x\ decl x N Ty' => C x), E = x\[locally-bound x]),
          pi p\ sigma F\ 
            F = compile-premise L L1 p Ty ProofHd IsPositive (Bo p) [p|ProofTlR],
            E p => compile-yyy F z Arity p p Ty PremR (C p)
        ].
      compile-xxx L L2 ProofHd IsPositive Goal ProofTlR PremR Clause :-
        std.do![    
          coq.mk-app ProofHd {std.rev ProofTlR} Proof,
          precompile-ho.decompile-term L L1 Proof Proof' Prem1,
          precompile-ho.decompile-term L1 L2 Goal Goal' Prem2,
          compile-aux-conclusion IsPositive Goal' Proof' Prem2 Prem1 {std.rev PremR} Clause
        ].

      pred compile-aux-conclusion 
        i:bool,             % tt if the term is in positive position
        i:term,             % the goal (invariant: it is a constant or a application)
        i:term,             % the proof
        i:list prop,        % the list of HOPremises in input mode
        i:list prop,        % the list of HOPremises in output mode
        i:list prop,        % the premises
        o:prop.             % the compiled clause for the instance

      compile-aux-conclusion tt Goal Proof HOPremisesIn HOPremisesOut Premises Clause :-
        std.append {std.append HOPremisesIn Premises} HOPremisesOut AllPremises,
        make-tc Goal Proof AllPremises tt Clause.
      compile-aux-conclusion ff Goal Proof HOPremisesIn HOPremisesOut Premises Clause :- 
        make-tc Goal Proof Premises ff Clause1, 
        std.append {std.append HOPremisesIn [Clause1]} HOPremisesOut AllPremises,
        Clause = do AllPremises.
    }

    pred instance i:term, i:term, o:prop.
    instance Ty Proof Clause :-
      normalize-ty Ty Ty',
      tc.precomp.instance.get-univ Ty' UnivConstL,
      tc.precomp.instance.get-univ-instances Ty' UnivInstL,
      instance.compile-aux-preprocess Ty' Proof UnivConstL UnivInstL Clause.

    pred instance-gr i:gref, o:prop.
    instance-gr InstGR Clause :-
      coq.env.typeof InstGR Ty,
      tc.compile.instance Ty (global InstGR) Clause.
    
    namespace goal {
      % [uvar-pair V1 Ty V2] List of uvar for link-eta-dedup
      %                      V1 has arity n and V2 has arity n+1
      %                      If V1 has type A -> B, then A = Ty
      pred uvar-pair i:term, o:term, o:term.

      %                    Type     Var    Cnt    uvar-pair-list
      pred make-pairs-aux i:term, i:term, o:list prop.
      make-pairs-aux (prod _ Ty Bo) V [pi x\ uvar-pair x Ty X' :- x == V, ! | L] :- !,
        pi x\ make-pairs-aux (Bo x) X' L.
      make-pairs-aux Ty V [pi x\ uvar-pair x Ty V_ :- x == V, !].

      pred make-pairs i:list term, o:list prop.
      make-pairs [] [] :- !.
      make-pairs [X|Xs] L :- !,
        coq.typecheck X Ty ok,
        % std.assert! (not (var Ty)) "[TC] compile: Ty should not be flex", TODO: I want decomment this line once test.v passes
        make-pairs-aux Ty X L',
        make-pairs Xs L'',
        std.append L' L'' L.

      pred get-uva-pair-arity i:term, i:list term, o:term.
      get-uva-pair-arity X [] X :- !.
      get-uva-pair-arity X [_|L] Z :- uvar-pair X _ Y, !, 
        get-uva-pair-arity Y L Z.

      pred decompile-problematic-term i:term, i:list prop, o:term, o:list prop.
      decompile-problematic-term (tc.maybe-eta-tm T S) L V [link.eta V T' | L2] :-
        prune V S, !, fold-map T L T' L2.

      % TODO: maybe-llam
      % NOTE!!! a uvar in the goal has a scope!! At a certain point shoud do (X = uvar A S') and work with S'
      decompile-problematic-term (app[X|S]) L Z L :-
        var X, distinct_names S, !,
        get-uva-pair-arity X S Y,
        prune Z S, var Z Y S.

      pred compile i:term, i:list prop, o:term, o:list prop.
      compile T L T' L' :-
        (pi t l t' l'\ fold-map t l t' l' :- decompile-problematic-term t l t' l', !) =>
          fold-map T L T' L'.

      pred close-term-no-prune-ty i:(term -> list prop), i:term, o:list prop.
      close-term-no-prune-ty (x\ []) _ [] :- !.
      close-term-no-prune-ty (x\ [X x | Xs x]) Ty [@pi-decl `x` Ty x\ X x | Xs'] :- !, 
        close-term-no-prune-ty Xs Ty Xs'. 

      %                                  Uva      Binders      LinkEta 
      pred build-eta-links-of-vars-aux i:term, i:list term, o:list prop.
      build-eta-links-of-vars-aux Old L [Hd | Xs] :- 
        uvar-pair Old Ty Next, !,
        var OldScope Old L,
        Hd = link.eta OldScope (fun _ Ty (x\ NextScope x)),
        pi x\ sigma L'\
          std.append L [x] L',
          var (NextScope x) Next L',
          build-eta-links-of-vars-aux Next L' (Ys x), !,
        sigma Closed\ (close-term-no-prune-ty Ys Ty Closed),
        Xs = Closed.
      build-eta-links-of-vars-aux _ _ [].

      pred build-eta-links-of-vars i:list term, o:list prop.
      build-eta-links-of-vars [] [].
      build-eta-links-of-vars [V|Vars] L :-
        build-eta-links-of-vars-aux V [] L',
        build-eta-links-of-vars Vars L'',
        std.append L' L'' L.
    }
    
    %          Goal    Goal'      Links
    pred goal i:term, o:term, o:list prop.
    goal Goal Goal' Links :-
      tc.precomp.goal Goal GoalPrecomp Vars, !,
      goal.make-pairs Vars Pairs,
      Pairs => (
        goal.build-eta-links-of-vars Vars EtaLinks,
        goal.compile GoalPrecomp EtaLinks Goal' Links
      ).
  }
}