/* eqType representation and validation                                      */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

namespace derive.eqType.ast {

func translate-indt inductive -> eqb.eqType, diagnostic.
translate-indt I O D :-
  coq.env.indt-decl I Decl,
  coq.env.indt I _ _ _ _ KN _,
  translate-param Decl I KN O D.

func translate-param indt-decl, inductive, list constructor -> eqb.eqType, diagnostic.
translate-param (parameter ID _ Ty F) I KS (eqb.type-param F1) D :- whd Ty [] {{ Type }} _, !,
  @pi-parameter ID Ty x\ pi y\ term->trm x y ok => translate-param (F x) I KS (F1 y) D.
translate-param (parameter ID _ Ty F) I KS (eqb.value-param Ty1 F1) D :- term->trm Ty Ty1 ok, !,
  @pi-parameter ID Ty x\ pi y\ term->trm x y ok => translate-param (F x) I KS (F1 y) D.
translate-param (parameter ID _ _ _) _ _ _ (error S) :- !, S is "unsupported parameter " ^ ID.

translate-param (inductive ID tt (arity (sort S)) F) I KS (eqb.inductive I F1) D :- !,
  @pi-inductive ID (arity (sort S)) x\ pi y\ term->trm x y ok => translate-constructors (F x) KS (F1 y) D.
translate-param (record _ _ _ F) I [K] (eqb.inductive I (y\ [eqb.constructor K (F1 y)])) D :- !,
  pi y\ (self y :- !) => translate-record-constructor F (F1 y) D.
translate-param _ _ _ _ (error S) :- S is "unsupported inductive arity".

:index (1)
func translate-constructors list indc-decl, list constructor -> list eqb.constructor, diagnostic.
translate-constructors [] [] [] ok.
translate-constructors [constructor _ A|KS] [K|KK] [eqb.constructor K Args|KS1] D :- std.do-ok! D [
  translate-arguments {coq.arity->term A} Args,
  translate-constructors KS KK KS1,
].

func translate-arguments term -> eqb.arguments, diagnostic.
translate-arguments T T2 D :- whd1 T T1, !, translate-arguments T1 T2 D.
translate-arguments (prod N Ty F) (eqb.irrelevant Ty1 F1) D :- not(pi x\ occurs x (F x)), irrelevant? Ty Ty1 ok, !,
  @pi-decl N Ty x\  translate-arguments (F x) F1 D.
translate-arguments (prod N Ty F) (eqb.regular Ty1 F1) D :- not(pi x\ occurs x (F x)), !, std.do-ok! D [
  term->trm Ty Ty1,
  (d\ @pi-decl N Ty x\  translate-arguments (F x) F1 d),
].
translate-arguments (prod N Ty F) (eqb.dependent Ty1 F1) D :- !, std.do-ok! D [
  term->trm Ty Ty1,
  (d\ @pi-decl N Ty x\ pi y\ term->trm x y ok => translate-arguments (F x) (F1 y) d),
].
translate-arguments Ty (eqb.stop Ty1) D :- name Ty, term->trm Ty Ty1 D, !.
translate-arguments (app [N|_] as Ty) (eqb.stop Ty1) D :- name N, term->trm Ty Ty1 D, !.
translate-arguments T _ (error S) :- S is "unsupported argument " ^ {coq.term->string T}.

func translate-record-constructor record-decl -> eqb.arguments, diagnostic.
translate-record-constructor end-record (eqb.stop X) ok :- self X.
translate-record-constructor (field _ ID Ty F) (eqb.irrelevant Ty1 F1) D :- not(pi x\ occurs x (F x)), irrelevant? Ty Ty1 ok, !,
  @pi-parameter ID Ty x\ translate-record-constructor (F x) F1 D.
translate-record-constructor (field _ ID Ty F) (eqb.regular Ty1 F1) D :- not(pi x\ occurs x (F x)), !, std.do-ok! D [
  term->trm Ty Ty1,
  (d\ @pi-parameter ID Ty x\ translate-record-constructor (F x) F1 d),
].
translate-record-constructor (field _ ID Ty F) (eqb.dependent Ty1 F1) D :- !, std.do-ok! D [
  term->trm Ty Ty1,
  (d\ @pi-parameter ID Ty x\ pi y\ term->trm x y ok => translate-record-constructor (F x) (F1 y) d),
].
translate-record-constructor (field _ ID _ _) _ (error S) :- S is "unsupported record field " ^ ID.

func self -> eqb.trm.

func valid eqb.trm -> diagnostic.
valid (eqb.global GR) ok :- eqType GR _, !.
valid (eqb.app GR A Args) D :- eqType GR EQT, !, valid-eqType EQT [A|Args] D.
valid T (error S) :- S is "not an eqType: " ^ {std.any->string T}.

:index (1)
func valid-eqType eqb.eqType, list eqb.trm -> diagnostic.
valid-eqType (eqb.inductive _ _) [] ok.
valid-eqType (eqb.type-param F) [T|TS] D :- std.do-ok! D [
  valid T,
  (d\ pi x\ valid-eqType (F x) TS d),
].
valid-eqType (eqb.value-param _ F) [_|TS] D :- std.do-ok! D [
  (d\ pi x\ valid-eqType (F x) TS d),
].

pred irrelevant? i:term, o:eqb.trm, o:diagnostic.
irrelevant? (app [{{ @eq }}, global EqType, A, B]) (eqb.app EQ EQTYPE [A1,B1]) D :- std.do-ok! D [
  std.lift-ok (eqType EqType _) "Not an eqType", %eqb-for Bool Bool _,
  std.lift-ok ({{ @eq }} = global EQ) "",
  term->trm (global EqType) EQTYPE,
  term->trm A A1,
  term->trm B B1,
].
irrelevant? T R D :- whd1 T T1, irrelevant? T1 R D.

func term->trm term -> eqb.trm, diagnostic.
term->trm (global GR) (eqb.global GR) ok :- !.
term->trm (app [global GRF,A|As]) (eqb.app GRF A1 As1) D :- !, std.do-ok! D [
  term->trm A A1,
  map-ok! As term->trm As1,
].
term->trm {{ lp:A -> lp:B }} (eqb.app {{:gref lib:elpi.derive.arrow }} A1 [B1]) D :- !, std.do-ok! D [
  term->trm A A1,
  term->trm B B1,
].
term->trm (app [N|As]) (eqb.app {{:gref lib:elpi.derive.apply }} N1 As1) D :- name N, !, std.do-ok! D [
  term->trm N N1,
  map-ok! As term->trm As1,
].
term->trm X _ (error S) :- S is "not an applicative term: " ^ {coq.term->string X}.

func map-ok! list A, (func A -> B, diagnostic) -> list B, diagnostic.
map-ok! [] _ [] ok.
map-ok! [X|XS] F [Y|YS] D :- F X Y D1, if (D1 = ok) (map-ok! XS F YS D) (D = D1).

func validate-eqType eqb.eqType -> diagnostic.
validate-eqType (eqb.type-param F) D :- pi x\ (valid x ok :- !) => validate-eqType (F x) D.
validate-eqType (eqb.value-param _ F) D :-
  pi x\ validate-eqType (F x) D.
validate-eqType (eqb.inductive _ F) D :-
  pi x\ (valid x ok :- !) => validate-constructors (F x) D.

func validate-constructors list eqb.constructor -> diagnostic.
validate-constructors [] ok.
validate-constructors [eqb.constructor _ Args|Ks] D :- std.do-ok! D [
  validate-arguments Args,
  validate-constructors Ks
].

func validate-arguments eqb.arguments -> diagnostic.
validate-arguments (eqb.stop _) ok.
validate-arguments (eqb.regular T Args) D :- std.do-ok! D [
  valid T,
  validate-arguments Args,
].
validate-arguments (eqb.irrelevant _ Args) D :- validate-arguments Args D.
validate-arguments (eqb.dependent T Args) D :- std.do-ok! D [
  valid T,
  (d\ pi x\ validate-arguments (Args x) d),
].

func main inductive -> list prop.
main I [C] :-
  std.assert-ok! (translate-indt I EQT) "derive.eqType.ast: translate",
  std.assert-ok! (validate-eqType EQT) "derive.eqType.ast: validate",
  C = (eqType (indt I) EQT),
  coq.elpi.accumulate _ "derive.eqType.db" (clause _ _ C).

}

namespace feqb {

func trm->term eqb.trm -> term.
trm->term (eqb.global GR) (global GR) :- !.
trm->term (eqb.app GR A AS) (app[global GR,A1|AS1]) :- !,
  trm->term A A1,
  std.map AS trm->term AS1.
trm->term T _ :- coq.error "cannot translate trm" T "to term, did you forget to assume feqb.trm->term ?".

}
