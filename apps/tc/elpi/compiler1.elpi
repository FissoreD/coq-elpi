/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% returns the classes on which the current gref depends
pred get-class-dependencies i:gref, o:list gref.
get-class-dependencies GR Res :-
  coq.env.dependencies GR _ DepSet,
  coq.gref.set.elements DepSet DepList,
  std.filter DepList coq.TC.class? Res.

pred compile-aux-preprocess 
  i:term,               % the type of the instance
  i:term,               % the global gref of the instance
  i:list univ,          % the list of univ variable to be replaced with elpi fresh vars
  i:list univ-instance, % the list of univ-instance to be replaced with elpi fresh vars
  o:prop.               % the compiled clause for the instance

compile-aux-preprocess InstType InstTerm [] [] Clause :-
  copy InstType InstType', !,
  tc.precompile-term InstType' InstType'' N,
  compile-quantify-pi-for-problem-terms N [] InstType'' InstTerm Clause.
compile-aux-preprocess InstType InstTerm [Univ | UnivL] UnivInstL (pi x\ Clause x) :- !,
  pi x\ (copy (sort (typ Univ)) (sort (typ x)) :- !) => 
    compile-aux-preprocess InstType InstTerm UnivL UnivInstL (Clause x).
compile-aux-preprocess InstType InstTerm [] [UnivInst | UnivInstL] (pi x\ Clause x) :- !,
  pi x\ (copy (pglobal A UnivInst) (pglobal A x) :- !) => 
    compile-aux-preprocess InstType InstTerm [] UnivInstL (Clause x).

pred clean-term i:term, o:term.
clean-term A B :-
  (pi t s r\ copy (tc.maybe-eta-tm t s) r :- !, copy t r) =>
  (pi t s r\ copy (tc.ho-var t s) r :- !, copy t r) =>
    copy A B.

pred make-eta-link i:nat, i:term, i:term, i:term, i:name, i:list term, o:prop.
make-eta-link z (tc.ho-var (prod _ Ty _) _) A B Name L (link.eta A' (fun Name Ty' (x\ B' x))) :-
  clean-term Ty Ty',
  name A' A L,
  pi x\ sigma L'\ std.append L [x] L', name (B' x) B L'.
make-eta-link (s N) (tc.ho-var (prod _ Ty Bo) _) A B Name L (pi x\ decl x `x` Ty' => Link x) :-
  clean-term Ty Ty',
  pi x\ make-eta-link N (Bo x) A B Name [x|L] (Link x). 

pred compile-quantify-pi-for-problem-terms
  i:nat, i:list term,
  i:term,             % the fuel of the compilation (the type of the instance)
  i:term,             % the global gref of the current instance
  o:prop.             % the compiled clause for the instance

compile-quantify-pi-for-problem-terms z L InstType ProofHd Clause :-
  compile-xxx L _ ProofHd tt InstType [] [] Clause.
compile-quantify-pi-for-problem-terms (s N) L InstType ProofHd (pi x\ Clause x) :-
  pi x\ is-uvar x => compile-quantify-pi-for-problem-terms N [x|L] InstType ProofHd (Clause x).


% Add links as prem for map-dedup
pred compile-yyy 
  i:list term,
  o:list term,
  i:nat,
  i:nat,
  i:term,
  i:term,
  i:term,
  i:term,
  i:bool,
  i:term,
  i:list term,
  i:list prop,
  o:prop.
compile-yyy L L2 End End _ P PTy ProofHd IsPositive ITy ProofTlR PremR Clause :- 
  (pi a b c\ get-TC-of-inst-type (tc.ho-var a c) b :- get-TC-of-inst-type a b) => 
    get-TC-of-inst-type PTy TC, !,
  compile-xxx L L1 P {neg IsPositive} PTy [] [] NewPrem,
  if (class TC _ deterministic _)
    (NewPrem' = do-once NewPrem)
    (NewPrem' = NewPrem),
  compile-xxx L1 L2 ProofHd IsPositive ITy ProofTlR [NewPrem' | PremR] Clause. 
compile-yyy L L1 End End _ _ _ ProofHd IsPositive ITy ProofTlR PremR Clause :- !,
  compile-xxx L L1 ProofHd IsPositive ITy ProofTlR PremR Clause. 
compile-yyy L L1 N End OldVar P PTy ProofHd IsPositive ITy ProofTlR PremR (pi x y\ Clause x y) :-
  pi x name\ sigma EtaLink\
    make-eta-link N PTy OldVar x name [] EtaLink,
    var-mem P x N PTy =>
      compile-yyy L L1 (s N) End x P PTy ProofHd IsPositive ITy ProofTlR [EtaLink | PremR] (Clause x name).

pred compile-xxx 
  i:list term,
  i:list term,
  i:term,
  i:bool,
  i:term,
  i:list term,
  i:list prop,
  o:prop.
compile-xxx L L1 ProofHd IsPositive (tc.ho-var (prod N Ty F) Arity) ProofTlR PremR Clause :- !,
  std.do![
    if (IsPositive = tt) 
      (Clause = (pi x\ C x), E = x\[is-uvar x]) 
      (clean-term Ty Ty', Clause = (pi x\ decl x N Ty' => C x), E = x\[locally-bound x]),
    pi p\ E p => compile-yyy L L1 z Arity p p Ty ProofHd IsPositive (F p) [p|ProofTlR] PremR (C p)
  ].
compile-xxx L L2 ProofHd IsPositive Goal ProofTlR PremR Clause :-
  std.do![    
    coq.mk-app ProofHd {std.rev ProofTlR} Proof,
    precompile-ho.decompile-term L L1 Proof Proof' Prem1,
    precompile-ho.decompile-term L1 L2 Goal Goal' Prem2,
    compile-aux-conclusion IsPositive Goal' Proof' Prem2 Prem1 {std.rev PremR} Clause
  ].

pred compile-aux-conclusion 
  i:bool,             % tt if the term is in positive position
  i:term,             % the conclusion of the current instance (invariant: it is a constant or a application)
  i:term,             % the global gref of the current instance
  i:list prop,        % the list of HOPremises in input mode
  i:list prop,        % the list of HOPremises in output mode
  i:list prop,        % the tc premises of the current instance
  o:prop.             % the compiled clause for the instance

compile-aux-conclusion tt Conclusion Solution HOPremisesIn HOPremisesOut Premises Clause :-
  std.append {std.append HOPremisesIn Premises} HOPremisesOut AllPremises,
  make-tc Conclusion Solution AllPremises tt Clause.
compile-aux-conclusion ff Conclusion Solution HOPremisesIn HOPremisesOut Premises Clause :- 
  make-tc Conclusion Solution Premises ff Clause1, 
  std.append {std.append HOPremisesIn [Clause1]} HOPremisesOut AllPremises,
  Clause = do AllPremises.

% build a list of Clauses of type tc to be temporarly added to the 
% database, used in theorems having assumptions.
pred compile-ctx i:goal-ctx, o:list prop.
compile-ctx [] [].
compile-ctx [X | Xs] [Clause | ResTl] :-
  (decl Var _ Ty = X; def Var _ Ty _ = X),
  std.do![
    is-instance-term Ty,
    compile-ty Ty Var _ Clause,
    compile-ctx Xs ResTl], !.
compile-ctx [_ | Tl] L :- compile-ctx Tl L.

pred get-univ-instances i:term, o:list univ-instance.
get-univ-instances T L :-
  (pi x L\ fold-map (pglobal _ x) L _ [x | L]) => fold-map T [] _ L.

pred get-univ i:term, o:list univ.
get-univ T L :-
  coq.univ.variable.set.elements {coq.univ.variable.of-term T} Vars,
  std.map Vars (x\r\ coq.univ.variable r x) L.

pred compile-ty i:term, i:term, o:gref, o:prop.
compile-ty TyRaw Inst TC-of-Inst Clause:-
  std.do![
    normalize-ty TyRaw Ty,
    get-TC-of-inst-type Ty TC-of-Inst,
    @redflags! coq.redflags.beta => coq.reduction.lazy.norm Ty Ty1, 
    get-univ Ty1 UnivConstL,
    get-univ-instances Ty1 UnivInstL,
    compile-aux-preprocess Ty1 Inst UnivConstL UnivInstL Clause].

pred compile i:gref, o:gref, o:prop.
compile InstGR TC-of-Inst Clause:-
  coq.env.typeof InstGR Ty,
  compile-ty Ty (global InstGR) TC-of-Inst Clause.

pred has-context-deps i:gref.
has-context-deps GR :-
  coq.env.section SectionVars,
  coq.env.dependencies GR _ Deps, 
  std.exists SectionVars (x\ coq.gref.set.mem (const x) Deps).

pred get-locality i:string, o:list prop.
get-locality "Local" [@local!].
get-locality _ [@local!] :- coq.env.current-section-path [_ | _].
get-locality "Global" [@global!].
get-locality "Export" [].

pred add-inst.aux i:gref, i:gref i:list prop, i:grafting.
add-inst.aux Inst TC Locality Grafting :-
  coq.env.current-section-path SectionPath,
  compile Inst TC Clause, 
  get-full-path Inst ClauseName,
  Locality => (
    add-tc-db ClauseName Grafting Clause, 
    add-tc-db _ Grafting (instance SectionPath Inst TC)).
add-inst.aux Inst _ _ _ :- 
  @global! => add-tc-db _ _ (banned Inst),
  coq.error "Not-added" "TC_solver" "[TC] Not yet able to compile" Inst "...".

pred add-inst i:gref, i:gref, i:string, i:int.
add-inst Inst TC LocalityStr Prio :-
  get-locality LocalityStr Locality,
  if (Prio = -1) (get-inst-prio Inst Prio1) (Prio1 = Prio),
  Grafting is after (int_to_string Prio1),
  add-inst.aux Inst TC Locality Grafting.

pred is-local.
is-local :- std.mem {attributes} (attribute "local" _).

pred add-inst>db.aux i:gref.
add-inst>db.aux Inst :-
  get-inst-prio Inst Prio,
  get-TC-of-inst-type {coq.env.typeof Inst} TC,
  % Note: this is an approximation of instance locality when added with 
  %       TC.AddAllInstances or TC.AddInstances InstName
  if (is-local; has-context-deps Inst) 
    (LocalityStr = "Local") 
    (LocalityStr = "Global"),
  add-inst Inst TC LocalityStr Prio.

% [add-inst->db IgnoreClassDepL ForceAdd Inst] compiles and add the Inst to
% the database if the instance is not banned or if it does not depend on a TC
% inside the list IgnoreClassDepL.
pred add-inst->db i:list gref, i:bool, i:gref.
add-inst->db _ tt Inst :- !, add-inst>db.aux Inst.
add-inst->db _ _ Inst :- 
  banned Inst, !, (coq.warning "banned-inst" "TC-warning" Inst "is banned").
add-inst->db _ _ Inst :- instance _ Inst _, !. % the instance has already been added
add-inst->db IgnoreClassDepL _ Inst :-
  get-class-dependencies Inst Dep,
  std.exists Dep (std.mem IgnoreClassDepL), !,
  coq.warning "invalid-dependency-inst" "TC-warning" Inst "depneds on a banned TC".
add-inst->db _ _ Inst :- !, add-inst>db.aux Inst.

% add all the instances of a TC
pred add-inst-of-tc i:list gref, i:list gref, i:gref.
add-inst-of-tc IgnoreDepClassGR IgnoreInstsGR GR:-
  get-inst-by-tc-name GR InstL,
  std.filter InstL (x\ not (std.mem IgnoreInstsGR x)) InstLF,
  std.forall InstLF (add-inst->db IgnoreDepClassGR ff).

pred add-tc-or-inst-gr i:list string, i:list string, i:list gref.
add-tc-or-inst-gr IgnoreDepClass IgnoreInsts Names :-
  std.map IgnoreDepClass coq.locate IgnoreDepClassGR,
  std.map IgnoreInsts coq.locate IgnoreInstsGR,
  std.forall Names (GR\
    if2 (coq.TC.class? GR)(add-inst-of-tc IgnoreDepClassGR IgnoreInstsGR GR)
        (is-instance-gr GR)(add-inst->db IgnoreDepClassGR ff GR)
        (coq.warning "not-inst-nor-tc" "TC-warning" GR "is neither a TC nor a instance")
  ).

% [remove-inst GR] remove an instance from the DB by replacing it with `dummy`
pred remove-inst i:gref.
remove-inst InstGR :- 
  get-full-path InstGR ClauseName,
  remove-clause ClauseName.

pred is-in-path i:string, i:gref. 
is-in-path Path GR :- 
  std.mem {coq.gref->path GR} Path.

% [add-path ClassName Path] adds only the instances from a given path name
pred add-path i:string, i:string.
add-path ClassName Path :-
  coq.locate ClassName GR,
  std.filter {get-inst-by-tc-name GR} (is-in-path Path) InstInPath,
  std.forall InstInPath (add-inst->db [] ff).

namespace class-coercion {
  kind task type.
  type add task.
  type remove task.

  pred do-task i:task, i:gref.
  do-task add GR :- add-inst->db [] tt GR.
  do-task remove GR :- remove-inst GR.

  pred loop-proj i:task, i:list argument.
  loop-proj _ [].
  loop-proj Task [str Proj | TL] :- 
    coq.locate Proj GRProj, existing-instance GRProj, !,
    do-task Task GRProj,
    loop-proj Task TL.
  loop-proj Task [_|TL] :- loop-proj Task TL.
  
}